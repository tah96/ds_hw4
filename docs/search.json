[
  {
    "objectID": "hw4_quarto.html",
    "href": "hw4_quarto.html",
    "title": "Homework 4",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n../MyData.csv\n\nWhat are the major benefits of using R projects?\n\nSome major benefits to using an R project include version control through git commands, consistent working directory and reproducability through centralized organization.\n\nWhat is git and what is github?\n\nGit is a version control software that can use a series of bash commands for interacting with a repository. Github is an online repository hosting platform where users can interact with the repository using git and other methods.\n\nWhat are the two main differences between a tibble and a data.frame?\n\nTibbles utilize “fancy print” when printed, meaning the output looks cleaner compared to data frames and includes important details along with the first few records of the object. Tibbles, however, do not coerce down to a vector when you subset to only one column using “[ ]”\n\nRewrite the following nested function call using BaseR’s chaining operator: arrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species),Petal.Length &lt; 1.55), Species)\n\nas_tibble(iris) |&gt; select(starts_with(“Petal”),Species) |&gt; filter(Petal.Length &lt; 1.55) |&gt; arrange(Species)"
  },
  {
    "objectID": "hw4_quarto.html#task-1---qa",
    "href": "hw4_quarto.html#task-1---qa",
    "title": "Homework 4",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n../MyData.csv\n\nWhat are the major benefits of using R projects?\n\nSome major benefits to using an R project include version control through git commands, consistent working directory and reproducability through centralized organization.\n\nWhat is git and what is github?\n\nGit is a version control software that can use a series of bash commands for interacting with a repository. Github is an online repository hosting platform where users can interact with the repository using git and other methods.\n\nWhat are the two main differences between a tibble and a data.frame?\n\nTibbles utilize “fancy print” when printed, meaning the output looks cleaner compared to data frames and includes important details along with the first few records of the object. Tibbles, however, do not coerce down to a vector when you subset to only one column using “[ ]”\n\nRewrite the following nested function call using BaseR’s chaining operator: arrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species),Petal.Length &lt; 1.55), Species)\n\nas_tibble(iris) |&gt; select(starts_with(“Petal”),Species) |&gt; filter(Petal.Length &lt; 1.55) |&gt; arrange(Species)"
  },
  {
    "objectID": "hw4_quarto.html#task-2-reading-delimited-data",
    "href": "hw4_quarto.html#task-2-reading-delimited-data",
    "title": "Homework 4",
    "section": "Task 2: Reading Delimited Data",
    "text": "Task 2: Reading Delimited Data"
  },
  {
    "objectID": "hw4_quarto.html#task-3-reading-excel-data",
    "href": "hw4_quarto.html#task-3-reading-excel-data",
    "title": "Homework 4",
    "section": "Task 3: Reading Excel Data",
    "text": "Task 3: Reading Excel Data\nWe will read in the White Wine data form our “files” folder and print out as a tibble\n\nwhite_wine &lt;- readxl::read_excel(path='files/white-wine.xlsx')\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nWe will fetch the variable names from the second sheet of the file. We will then assign those variable names to the first sheet (already read in).\nWe will print out the Wine tibble again to make sure this worked.\n\nvariable_names &lt;- readxl::read_excel(path='files/white-wine.xlsx',sheet=2)\n\ncolnames(white_wine) &lt;- pull(variable_names,\"Variables\")\nwhite_wine\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nWe’ll also add a “color” column to our White tibble. This will be white for all values in this tibble.\n\nwhite_wine$wine_type &lt;- \"white\"\n\nLets now read in the red white data, making sure our col_types match that of the white wine data set. We can do this using the map_chr function from the purrr library. We are also excluding the last column “color” since this is not included in the raw red wine data.\nWe will also go ahead and add the appropriate color and rename the columns like we did with the white wine data.\nWe will print out the final tibble\n\nred_wine &lt;- readr::read_delim(file='https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv',delim=\";\",col_types=head(map_chr(white_wine,typeof),-1),show_col_types=FALSE)\n\nWarning: The following named parsers don't match the column names:\nfixed_acidity, volatile_acidity, citric_acid, residual_sugar,\nfree_sulfur_dioxide, total_sulfur_dioxide\n\ncolnames(red_wine) &lt;- head(colnames(white_wine),-1)\n\nred_wine$wine_type = \"red\"\n\nred_wine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nNow to combine (union) or two tibbles into one!\n\nwine &lt;- dplyr::bind_rows(white_wine,red_wine)\nwine\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nNow lets apply a chain of functions to the data. The chain includes: 1. Filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132). 2. Sort the data from highest quality to lowest. 3. Select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable. 4. Add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable.\n\nwine %&gt;%\n  filter(quality &gt; 6.5 & alcohol &lt; 132) %&gt;%\n  arrange(desc(quality)) %&gt;%\n  select(contains(\"acid\"),alcohol,quality,wine_type) %&gt;%\n  group_by(quality) %&gt;%\n  mutate(across(alcohol,.fns=list(mean=mean,sd=sd),.names=\"quality_level_{.col}_{.fn}\"))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol quality wine_type\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n 1            91             0.27        0.45     104       9 white    \n 2            66             0.36        0.29     124       9 white    \n 3            74             0.24        0.36     125       9 white    \n 4            69             0.36        0.34     127       9 white    \n 5            71             0.26        0.49     129       9 white    \n 6            62             0.66        0.48     128       8 white    \n 7            62             0.66        0.48     128       8 white    \n 8            68             0.26        0.42     105       8 white    \n 9            67             0.23        0.31     107       8 white    \n10            67             0.23        0.31     107       8 white    \n# ℹ 1,196 more rows\n# ℹ 2 more variables: quality_level_alcohol_mean &lt;dbl&gt;,\n#   quality_level_alcohol_sd &lt;dbl&gt;"
  }
]